Arquitetura .NET - Eduardo Pires
==============================================================================================================

Estilos Arquiteturais
==============================================================================================================
- Um estilo arquitetural é uma abordagem de como projetar e entregar uma aplicação.
- Trata-se de como organizar os componentes responsáveis de uma arquitetura, como eles irao interagir entre si e quais aspectos tecnológicos irão atender.

=> Arquitetura Monolítica (Todas as regras em uma única aplicação, usado apenas para soluções muito simples)
=> Arquitetura em Camadas
=> Arquitetura REST
=> Arquitetura de Microservices
=> Arquitetura de Plugins (Exemplo: Wordpress)
=> Arquitetura Client-Server (Exemplo: Site / Sistema Web)

Padrões Arquiteturais
==============================================================================================================
- Os Padrões Arquiteturais são semelhantes aos "Design Patterns", mas possuem um escopo diferente.
- Padrões Arquiteturais são estratégias de alto nível que dizem respeito a componentes de grande escala, as propriedades e mecanismos globais de um sistema.
- Um projeto de arquitetura pode conter diversos estilos arquiteturais, e cada estilo arquitetura pode utilizar diversos padrões arquiteturais.
Um padrão arquitetural pode ser subconjunto de um estilo arquitetural visando um escopo específico.


=> 3-Tier Architecture (3 Camadas)
==============================================================================================================
- Clássica maneira de distribuir responsabilidades (apresentação, aplicação [negócios], acesso a dados).
- Não deve ser menosprezada, pois nem sempre a complexibilidade é uma solução para problemas simples.
- Pode ser aplicada em diversos cenários, porém geralmente é mais encontrada em aplicações com foco comercia (cadastros, regras e etc).


=> Onion Architecture
==============================================================================================================
- Client (UI / Api) => Business Logic (Application) => Repository => Domain
- User Interface => Application Services => Domain Services => Domain
- Arquitetura mais utilizada atualmente


=> Hexagonal Architecture "Ports & Adapters"
==============================================================================================================
- Onion, DDD, Clean, CQRS tudo junto...


=> CQRS - Command Query Responsibility Segregation
==============================================================================================================
- Um padrão arquitetural onde o foco principal é separar os meios de leitura e escrita de dados. Alterações de dados são realizadas via commands e leitura de dados são realizados via query.
- O objetivo do CQRS é prover expressividade para aplicaçao, pois todos os Commands representam uma intenção de negócio.
- CQRS promove a consistência eventual, que é quando possuímos um banco de leitura e outro de escrita com os mesmos dados, porém os dados não são consistidos exatamente no mesmo momento.
- Muito aplicado em arquiteturas hexagonais, microservices ou aplicações que possuem alta demanda de consumo de dados.

=> Commands:
- Representam uma intenção de mudança no estado de uma entidade.
- São expressivos e representam uma única intenção de negócio, ex: AumentoSalarialFuncionarioCommand

=> Queries:
- É a forma de obter dados de um banco ou origem de dados para atender necessidades da aplicação.


=> Event Sourcing
==============================================================================================================
- "Nós podemos buscar o estado de uma aplicação para encontrar o estado atual do mundo, e isso responde muitas perguntas.
	Entretando há momentos que nós não só queremos ver onde estamos, mas também queremos saber como chegamos lá." - Martin Fowler
- "Event Sourcing assegura que todas as mudanças feitas no estado de uma aplicação são armazenadas em uma sequência de eventos. Não só podemos buscar esses eventos,
	mas também podemos usar este log de eventos para reconstruir estados passados e ajustar automaticamente o estado atual com mudanças retroativas." - Martin Fowler
- A ideia central é persistir todos os estados anteriores de uma entidade de negócio desde o momento de sua criação. Com estes dados é possível realizar o "replay" dos fatos passados
	para entender o comportamento do usuário, trabalhar com Big Data, Machine Learning, realizar testes de integração com cenários reais ou simplesmente recriar as entidade se necessário.
- Em resumo, gravar um log de todos os estados da entidade.


=> DDD - Domain-Driven Design
==============================================================================================================
- A idéia foi introduzida em 2003 por Eric Evans.
- Indicado para aplicações complexas com muitas entidades e regras de negócio. Razoavelmente fácil de entender, difícil de aplicar.
- Um guia de como entender um negócio e organizá-lo em um conjunto de princípios, criar uma modelagem com base no negócio e implementar utilizando diversas boas práticas.

=> Processo de "implementação" do DDD:
- Entender o Negócio.
- Extrair a Linguagem Ubíqua.
- Modelagem Estratégica
- Definir a Arquitetura
- Modelagem Tática

=> Modelagem Tática:
- Aggregate Object: Uma entidade que é a raiz agregadora de um processo do domínio que envolve mais de uma entidade.
- Domain Model: Um objeto do domínio, possui estados e comportamentos, lógica de negócio, getters e setters AdHoc, etc.
- Value Object: Um objeto que agrega valor às entidades, não possui identidade e é imutável.
- Factory: Classe responsável por construir adequadamente um objeto / entidade.
- Domain Service: Serviço de domínio que atende partes do negócio que não se encaixam em entidades específicas, trabalha com diversas 
	entidades, realiza persistência através de repositórios e etc.
- Application Service: Serviço de aplicação que orquestra ações disparadas pela camada de apresentação e fornece DTOs para comunicação
	entre as demais camadas e para o consumo da camada de apresentação.
- Repository: Uma classe que realiza persistência de entidades se comunicando diretamente com o meio de acesso aos dados, é utilizado apenas um repositório por agregação.
- External Service: Serviço externo que realiza a consulta/persistência de informações por meios diversos.


=> Arquiteturas Evolutivas
==============================================================================================================
- "Um bom arquiteto permite que decisões importantes sejam adiadas e um bom arquiteto maximiza o número de decisões não tomadas." - Uncle Bob
- "Uma arquitetura evolutiva suporte mudanças contínuas e incrementais como um primeiro princípio por meio de vários aspectos." - Rebecca Parsons
- "Mudanças são inevitáveis. A evolução, no entanto, é opcional." - Tony Robbins


=> Sempre considere a complexibilidade
==============================================================================================================
- Acidental: A complexibilidade acidental é aquela que surge durante o processo de desenvolvimento, ou seja, ela é causada pea abordagem escolhida para resolver o problema.
- Essencial: Já a essencial é basicamente a complexibilidade que nosso software se propõe resolver. Infelizmente existem problemas complexos, e é neles que temos que focar.


=> Conway's Law
==============================================================================================================
- "Qualquer empresa que projeta um sistema, inevitavelmente produz um projeto cuja estrutura é uma cópia da estrutura de comunicação da organização." - Melvin Conway
- A forma como o time está estruturado pode refletir diretamente na aplicação que deseja entregar.


=> Agilidade e o Manifesto Ágil
==============================================================================================================
- Indivíduos e interações mais que processos e ferramentas.
- Software em funcionamento mais que documentação abrangente.
- Colaboração com o cliente mais que negociações e contratos.
- Responder a mudanças mais que seguir um plano.
- Nossa maior prioridade é satisfazer o cliente, através da entrega adiantada e contínua de software de valor.
- Aceitar mudanças de requisitos, mesmo no fim do desenvolvimento. Processos ágeis se adequam a mudanças, para que o cliente possa tirar vantagens competitivas.
- Entregar software funcionando com frequência, na escala de semanas até meses, com preferência aos períodos mais curtos.
- Pessoas relacionadas à negócios e desenvolvedores devem trabalhar em conjunto e diariamente, durante todo o curso do projeto.
- Contruir projetos ao redor de indivíduos motivados. Dando a eles o ambiente e suporte necessário, e confiar que farão seu trabalho.
- O método mais eficiente e eficaz de transmitir informações para, e por dentro de um time de desenvolvimento, é através de uma conversa cara a cara.
- Software funcional é a medida primária do processo.
- Processos ágeis promovem um ambiente sustentável. Os patrocinadores, desenvolvedores e usuários, devem ser capazes de manter indefinidamente, passos constantes.
- Contínua atençao à excelência técnica e bom design, aumenta a agilidade.
- Simplicidade: a arte de maximizar a quantidade de trabalho que não precisou ser feito.
- As melhores arquiteturas, requisitos e designs emergem de times auto-organizáveis.
- Em intervalos regulares, o time reflete em como ficar mais efetivo, se ajustam e otimizam seu comportamento de acordo.


=> DevOps
==============================================================================================================
- O termo DevOps deriva das palavras desenvolvimento (development) e operações (operations), sendo uma prática de engenharia de software que possui o intúido de unificar o 
	desenvolvimento de software (Dev) e a operação de software (Ops).
- A característica principal do movimento DevOps é defender fortemente a automação e monitoramento em todas as fases da construção do software, da integração, 
	teste, liberação para implantação e gerenciamento de infraestrutura.
- DevOps pretende fornecer, em ciclos de desenvolvimento menores, frequência de implantação aumentada, liberações mais seguras, em alinhamento próximo com os objetivos do negócio.


=> Principios DRY, KISS e YAGNI
==============================================================================================================
- DRY (Don't Repeat Yourself) => Cada parte do conhecimento deve ter uma representação única, não ambígua e definitiva dentro da aplicação.
- KISS (Keep It Simple, Stupid) => O KISS valoriza a simplicidade do projeto e defende que toda a complexibilidade desnecessária seja descartada.
- YAGNI (You Ain't Gonna Need It) => Uma orientação que sugere não adicionar funcionalidades ao código fonte de uma aplicação até que estas sejam realmente necessárias.


=> Leituras recomendadas
==============================================================================================================
Ler na sequência:
- Clean Code - Robert C. Martin
- Clean Coder - Robert C. Martin
- Clean Architecture - Robert C. Martin
- Patterns of Enterprise Application Architecture - Martin Fowler
- Implementing Domain-Driven Design - Vaughn Vernon
- Domain-Driven Design Distiled - Vaughn Vernon

- Computer Science - Kevin Wayne
- Domain-Driven Design - Eric Evans
