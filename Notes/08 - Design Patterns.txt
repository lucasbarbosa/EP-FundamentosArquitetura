Arquitetura .NET - Eduardo Pires
==============================================================================================================

Design Patterns
==============================================================================================================
=> Evolução dos estilos: Sequencial => Procedural => OOP => Design Patterns

- Design Patterns são padrões de código para solução de problemas conhecidos.
- O objetivo não é reinventar a roda e aplicar uma solução com um bom design de código.
- O conceito de padrões foi introduzido por 4 desenvolvedores intitulados "Gang of Four" (GoF) e hoje conta com 23 padrões fundamentais.
- Atualmente existem mais de 80 padrões conhecidos que são em geral variações dos 23 patterns do GoF

Padrões e famílias
==============================================================================================================
=> (C) Creational Patterns - Fornecem meios de criação de um objeto e de como ele será instanciado.
=> (S) Structural Patterns - Tratam da composição de objetos por heranças e interfaces para diferentes funcionalidades.
=> (B) Behavioral Patterns - Tratam das interações e comunicação entre os objetos além da visão de responsabilidades.

=> (C) Abstract Factory - Cria uma instância de diversas famílias de classes.
==============================================================================================================
public class VeiculoCreator
{
    public static Veiculo Criar(string modelo, Porte porte)
    {
        switch (porte)
        {
            case Porte.Pequeno:
                return new VeiculoPequeno(modelo, porte);
            case Porte.Medio:
                return new VeiculoMedio(modelo, porte);
            case Porte.Grande:
                return new VeiculoGrande(modelo, porte);
            default:
                throw new ApplicationException("Porte de veiculo desconhecido.");
        }
    }
}

public class ExecucaoAbstractFactory
{
    public static void Executar()
    {
        var veiculosSocorro = new List<Veiculo>
        {
            VeiculoCreator.Criar("Celta", Porte.Pequeno),
            VeiculoCreator.Criar("Jetta", Porte.Medio),
            VeiculoCreator.Criar("BMW X6", Porte.Grande)
        };

        veiculosSocorro.ForEach(v => AutoSocorro.CriarAutoSocorro(v).RealizarAtendimento());
    }
}


=> (C) Factory Method - Cria uma instância de diversas derivações da classes.
==============================================================================================================
// Abstract Creator
public abstract class DbFactory
{
    // Factory Method
    public abstract DbConnector CreateConnector(string connectionString);

    public static DbFactory Database(DataBase dataBase)
    {
        if(dataBase == DataBase.SqlServer)
            return new SqlFactory();
        if(dataBase == DataBase.Oracle)
            return new OracleFactory();

        throw new ApplicationException("Banco de dados não reconhecido.");
    }
}

public class ExecucaoFactoryMethod
{
    public static void Executar()
    {
        var sqlCn = DbFactory.Database(DataBase.SqlServer)
                                .CreateConnector("minhaCS")
                                .Connect();

        sqlCn.ExecuteCommand("select * from tabelaSql");
        sqlCn.Close();

        Console.WriteLine("");
        Console.WriteLine("--------------------------------");
        Console.WriteLine("");

        var oracleCn = DbFactory.Database(DataBase.Oracle)
                                .CreateConnector("minhaCS")
                                .Connect();

        oracleCn.ExecuteCommand("select * from tabelaOracle");
        oracleCn.Close();
    }
}

=> (C) Singleton - Cria uma única instância que será utilizada por todos os recursos.
==============================================================================================================
internal sealed class LoadBalancer
{
    private static readonly LoadBalancer Instance = new LoadBalancer();

    private readonly List<Server> _servers;
    private readonly Random _random = new Random();

    private LoadBalancer()
    {
        _servers = new List<Server>
        {
                new Server{ Id=Guid.NewGuid(),  Name = "ServerI", IP = "120.14.220.18" },
                new Server{ Id=Guid.NewGuid(), Name = "ServerII", IP = "120.14.220.19" },
                new Server{ Id=Guid.NewGuid(), Name = "ServerIII", IP = "120.14.220.20" },
                new Server{ Id=Guid.NewGuid(), Name = "ServerIV", IP = "120.14.220.21" },
                new Server{ Id=Guid.NewGuid(), Name = "ServerV", IP = "120.14.220.22" },
        };
    }

    public static LoadBalancer GetLoadBalancer()
    {
        return Instance;
    }

    public Server NextServer
    {
        get
        {
            var r = _random.Next(_servers.Count);
            return _servers[r];
        }
    }
}

public class ExecucaoSingleton
{
    public static void Executar()
    {
        var b1 = LoadBalancer.GetLoadBalancer();
        var b2 = LoadBalancer.GetLoadBalancer();
        var b3 = LoadBalancer.GetLoadBalancer();
        var b4 = LoadBalancer.GetLoadBalancer();

        if (b1 == b2 && b2 == b3 && b3 == b4)
        {
            Console.WriteLine("Mesma instância\n");
        }

        var balancer = LoadBalancer.GetLoadBalancer();

        for (var i = 0; i < 15; i++)
        {
            var serverName = balancer.NextServer.Name;
            Console.WriteLine("Disparando request para: " + serverName);
        }
    }
}

=> (S) Adapter - Compatibiliza objetos de interfaces diferentes.
==============================================================================================================
// Adapter class
public class LogAdapter : ILogger
{
    private readonly ILogNetMaster _logNetMaster;

    public LogAdapter(ILogNetMaster logNetMaster)
    {
        _logNetMaster = logNetMaster;
    }

    public void Log(string message)
    {
        _logNetMaster.LogInfo(message);
    }

    public void LogError(Exception exception)
    {
        _logNetMaster.LogException(exception);
    }
}

public class ExecucaoAdapter
{
    public static void Executar()
    {
        var pagamentoLogPadrao = new TransacaoService(new Logger());
        pagamentoLogPadrao.RealizarTransacao();

        var pagamentoLogCustom = new TransacaoService(new LogAdapter(new LogNetMasterService()));
        pagamentoLogCustom.RealizarTransacao();
    }
}

=> (S) Facade - Uma única classe que representa um subsistema.
==============================================================================================================
public class PagamentoCartaoCreditoService : IPagamento
{
    private readonly IPagamentoCartaoCreditoFacade _pagamentoCartaoCreditoFacade;

    public PagamentoCartaoCreditoService(IPagamentoCartaoCreditoFacade pagamentoCartaoCreditoFacade)
    {
        _pagamentoCartaoCreditoFacade = pagamentoCartaoCreditoFacade;
    }

    public Pagamento RealizarPagamento(Pedido pedido, Pagamento pagamento)
    {
        pagamento.Valor = pedido.Produtos.Sum(p => p.Valor);
        Console.WriteLine("Iniciando Pagamento via Cartão de Crédito - Valor R$ " + pagamento.Valor);

        if (_pagamentoCartaoCreditoFacade.RealizarPagamento(pedido, pagamento))
        {
            pagamento.Status = "Pago via Cartão de Crédito";
            return pagamento;
        }

        pagamento.Status = "Cartão de Crédito Recusado!";
        return pagamento;
    }
}

public class PagamentoCartaoCreditoFacade : IPagamentoCartaoCreditoFacade
{
    private readonly IPayPalGateway _payPalGateway;
    private readonly IConfigurationManager _configManager;

    public PagamentoCartaoCreditoFacade(IPayPalGateway payPalGateway, IConfigurationManager configManager)
    {
        _payPalGateway = payPalGateway;
        _configManager = configManager;
    }

    public bool RealizarPagamento(Pedido pedido, Pagamento pagamento)
    {
        var apiKey = _configManager.GetValue("apiKey");
        var encriptionKey = _configManager.GetValue("encriptionKey");

        var serviceKey = _payPalGateway.GetPayPalServiceKey(apiKey, encriptionKey);
        var cardHashKey = _payPalGateway.GetCardHashKey(serviceKey, pagamento.CartaoCredito);

        var pagamentoResult = _payPalGateway.CommitTransaction(cardHashKey, pedido.Id.ToString(), pagamento.Valor);

        return pagamentoResult;
    }
}

=> (S) Composite - Compartilha um objeto em estruturas de árvores que representam hierarquias.
==============================================================================================================
public class Mensagem : IMessage, IEnumerable<IMessage>
{
    private readonly List<IMessage> _lista = new List<IMessage>();

    public string Nome { get; set; }

    public Mensagem(string nome)
    {
        Nome = nome;
    }
}

public class ExecucaoComposite
{
    public static void Executar()
    {
        var validacaoCadastro = new Mensagem("O cadastro não foi realizado!");

        var usuarioFormErro = new Mensagem("O usuário informou um nome inválido");

        var tamanhoNomeForm = new InputFormMessage("O nome precisa possuir mais de 2 caracteres");
        var nomeVazioForm = new InputFormMessage("O nome não pode possuir numeros");

        usuarioFormErro.AdicionarFilha(tamanhoNomeForm);
        usuarioFormErro.AdicionarFilha(nomeVazioForm);

        validacaoCadastro.AdicionarFilha(usuarioFormErro);
    }
}

=> (B) Command - Encapsula um command request em um objeto.
==============================================================================================================
internal class Calculadora
{
    private int _valorAtual;

    public void Operacao(char operador, int valor)
    {
        switch (operador)
        {
            case '+': _valorAtual += valor; break;
            case '-': _valorAtual -= valor; break;
            case '*': _valorAtual *= valor; break;
            case '/': _valorAtual /= valor; break;
        }
        Console.WriteLine("(dado {1} {2}) - Valor atual = {0,3}", _valorAtual, operador, valor);
    }
}

public class Usuario
{
    // Initializers
    private readonly Calculadora _calculadora = new Calculadora();
    private readonly List<Commander> _commands = new List<Commander>();
    private int _total;

    public void Adicionar(char operador, int valor)
    {
        Commander command = new CalculadoraCommand(_calculadora, operador, valor);
        command.Executar();

        _commands.Add(command);
        _total++;
    }

    public void Retornar(int niveis)
    {
        Console.WriteLine("\n---- Retornando {0} níveis ", niveis);

        for (var i = 0; i < niveis; i++)
        {
            if (_total >= _commands.Count - 1) continue;
            var command = _commands[_total++];
            command.Executar();
        }
    }

    public void Desfazer(int niveis)
    {
        Console.WriteLine("\n---- Desfazendo {0} níveis ", niveis);

        for (var i = 0; i < niveis; i++)
        {
            if (_total <= 0) continue;
            var command = _commands[--_total];
            command.Desfazer();
        }
    }
}

public class ExecucaoCommand
{
    public static void Executar()
    {
        var user = new Usuario();

        user.Adicionar('+', 100);
        Console.ReadKey();
        user.Adicionar('-', 50);
        Console.ReadKey();
        user.Adicionar('*', 10);
        Console.ReadKey();
        user.Adicionar('/', 2);
        Console.ReadKey();

        user.Desfazer(4);
        Console.ReadKey();

        user.Retornar(3);
    }
}

=> (B) Strategy - Encapsula um algoritmo dentro de uma classe.
==============================================================================================================
public class PedidoService
{
    private readonly IPagamento _pagamento;
        
    public PedidoService(IPagamento pagamento)
    {
        _pagamento = pagamento;
    }

    public Pagamento RealizarPagamento(Pedido pedido, Pagamento pagamento)
    {
        return _pagamento.RealizarPagamento(pedido, pagamento);
    }
}

public class PagamentoTransferenciaService : IPagamento
{
    private readonly IPagamentoTransferenciaFacade _pagamentoTransferenciaFacade;

    public PagamentoTransferenciaService(IPagamentoTransferenciaFacade pagamentoTransferenciaFacade)
    {
        _pagamentoTransferenciaFacade = pagamentoTransferenciaFacade;
    }

    public Pagamento RealizarPagamento(Pedido pedido, Pagamento pagamento)
    {
        pagamento.Valor = pedido.Produtos.Sum(p => p.Valor);
        Console.WriteLine("Iniciando Pagamento via Transferência - Valor R$ " + pagamento.Valor);

        pagamento.ConfirmacaoTransferencia = _pagamentoTransferenciaFacade.RealizarTransferencia();
        pagamento.Status = "Pago via Transferência";
        return pagamento;
    }
}

public class ExecucaoStrategy
{
    public static void Executar()
    {
        var produtos = new List<Produto>
        {
            new Produto{Nome = "Tenis Adidas", Valor = new Random().Next(500)},
            new Produto{Nome = "Camisa Boliche", Valor = new Random().Next(500)},
            new Produto{Nome = "Raquete Tenis", Valor = new Random().Next(500)}
        };

        var pedido = new Pedido
        {
            Id = Guid.NewGuid(),
            Produtos = produtos
        };

        var meioPagamentoTransferencia = new Pagamento
        {
            MeioPagamento = MeioPagamento.TransferenciaBancaria,
            CartaoCredito = "5555 2222 5555 9999"
        };

        var pedidoTransferencia2 = new PedidoService(PagamentoFactory.CreatePagamento(meioPagamentoTransferencia.MeioPagamento));
        var pagamentoTransferencia2 = pedidoTransferencia2.RealizarPagamento(pedido, meioPagamentoTransferencia);
        Console.WriteLine(pagamentoTransferencia2.Status);
    }
}

=> (B) Observer - Uma forma de notificar mudanças a uma séria de classe.
==============================================================================================================
public static class ExecucaoObserver
{
    public static void Executar()
    {
        var joao = new Observador("João");
        var eduardo = new Observador("Eduardo");
        var bill = new Observador("Bill");

        var amazon = new PapelBovespa("Amazon", NextDecimal());
        var microsoft = new PapelBovespa("Microsoft", NextDecimal());
            
        amazon.Subscribe(joao);
        amazon.Subscribe(eduardo);

        microsoft.Subscribe(eduardo);
        microsoft.Subscribe(bill);

        Console.WriteLine("");
        Console.WriteLine("------------------");
        Console.WriteLine("");

        for (int i = 0; i < 5; i++)
        {
            amazon.Valor = NextDecimal();
            microsoft.Valor = NextDecimal();

            if (i == 1)
            {
                amazon.UnSubscribe(eduardo);
            }
        }
    }

    public static decimal NextDecimal()
    {
        var random = new Random();
        var r = random.Next(141421, 314160);
        return r / (decimal) 100000.00;
    }
}

// Subject
public abstract class Investimento
{
    private decimal _valor;
    private readonly List<IObservador> _observadores = new List<IObservador>();

    protected Investimento(string simbolo, decimal valor)
    {
        Simbolo = simbolo;
        _valor = valor;
    }

    public string Simbolo { get; }
    public decimal Valor
    {
        get => _valor;
        set
        {
            if (_valor == value) return;

            _valor = value;
            Notificar();
        }
    }


    public void Subscribe(IObservador observador)
    {
        _observadores.Add(observador);
        Console.WriteLine($"Notificando que {observador.Nome} está recebendo atualizãções de {Simbolo}");
    }

    public void UnSubscribe(IObservador observador)
    {
        _observadores.Remove(observador);
        Console.WriteLine($"Notificando que {observador.Nome} NÃO está recebendo atualizãções de {Simbolo}");
    }

    private void Notificar()
    {
        foreach (var investor in _observadores)
        {
            investor.Notificar(this);
        }

        Console.WriteLine("");
    }
}

// Concrete Observer
internal class Observador : IObservador
{
    public Observador(string nome)
    {
        Nome = nome;
    }

    public string Nome { get; }

    public void Notificar(Investimento investimento)
    {
        Console.WriteLine("Notificando {0} que {1} " + "teve preço alterado para {2:C}", Nome, investimento.Simbolo, investimento.Valor);
    }
}

Evite o Patternite
==============================================================================================================
- Patternite é o mal que o desenvolvedor sofre quando deseja aplicar todos os patterns conhecidos apenas para praticar ou por entender que quanto mais patterns melhor.
- Não utilize sem conhecer.
- Apesar de conhecer só utilize se necessário.
